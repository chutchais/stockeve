# docker-compose.yml
# version: '3'
# services:
#     redis:
#         container_name: inventory-redis
#         image: redis:5.0.6-alpine
#         networks:
#             - main
#         volumes:
#             - redis_data:/data
#         # ports:
#         #     - 6379:6379
#         expose:
#             - "6379"


#     postgres:
#         restart: always
#         image: postgres:latest
#         container_name: inventory-db
#         # ports:
#         #     - "5432:5432"
#         expose:
#             - "5432"
#         environment:
#             - POSTGRES_USER=inventory_sa
#             - POSTGRES_PASSWORD=pAssw0rd!
#             - POSTGRES_DB=inventory_db
#         networks:
#             - main
#         volumes:
#             - pgdata:/var/lib/postgresql/inventory/

#     web:
#         container_name: inventory-server
#         restart: always
#         build: ./src
#         # expose:
#         #     - "8000"
#         links:
#             - postgres:postgres
#             # - redis:redis
#         networks:
#             - main
#         volumes:
#             # - web-django:/usr/src/payment
#             - web-static:/staticfiles
#         # env_file: .env
#         command: gunicorn inventory.wsgi:application -w 2 -b :80
#         ports:
#             - 8080:80
  
#     qcluster:
#         build:
#             context: ./src
#         networks:
#             - main
#         # links:
#         #   - payment-redis:payment-redis
#         #   - postgres:postgres
#         volumes:
#             - web-static:/staticfiles
#         command: python manage.py qcluster
#         container_name: inventory-qcluster
#         depends_on:
#             - web
#         environment:
#             - REDIS_URL=redis://redis:6379/0
    
#     winspeed:
#         build:
#             context: ./winspeed
#         networks:
#             - main
#         command: python app.py
#         container_name: winspeed
#         ports:
#             - 8081:5000

# volumes:  
#   # web-django:
#   redis_data:
#   web-static:
#   pgdata:

# networks:
#   main:


#docker-compose.yml
version: '3'
services:
    redis:
        container_name: inventory-redis
        image: redis:5.0.6-alpine
        networks:
            - main
        volumes:
            - redis_data:/data
        ports:
            - 6379:6379


    postgres:
        restart: always
        image: postgres:latest
        container_name: inventory-db
        ports:
            - "5432:5432"
        environment:
            - POSTGRES_USER=inventory_sa
            - POSTGRES_PASSWORD=pAssw0rd!
            - POSTGRES_DB=inventory_db
        networks:
            - main
        volumes:
            - pgdata:/var/lib/postgresql/inventory/

    web:
        container_name: inventory-server
        restart: always
        build: ./src
        expose:
            - "8000"
        links:
            - postgres:postgres
            # - redis:redis
        networks:
            - main
        volumes:
            # - web-django:/usr/src/payment
            - web-static:/staticfiles
        # env_file: .env
        command: gunicorn inventory.wsgi:application -w 2 -b :80
        ports:
            - 8080:80
  
    qcluster:
        build:
            context: ./src
        networks:
            - main
        # links:
        #   - payment-redis:payment-redis
        #   - postgres:postgres
        volumes:
            - web-static:/staticfiles
        command: python manage.py qcluster
        container_name: inventory-qcluster
        depends_on:
            - web
        environment:
            - REDIS_URL=redis://redis:6379/0
    
    winspeed:
        build:
            context: ./winspeed
        networks:
            - main
        command: python app.py
        container_name: winspeed
        ports:
            - 8081:5000

volumes:  
  # web-django:
  redis_data:
  web-static:
  pgdata:

networks:
  main:



# 1. Clear all chains:

# service firewalld stop (optional)

# sudo iptables -t filter -F
# sudo iptables -t filter -X
# 2. Then restart Docker Service:

# systemctl restart docker